/**
 * TypeScript types for Neuronix Multi-Agent System
 * Defines all interfaces and types used across agents and integrations
 */

// ============================================================================
// Input Types
// ============================================================================

/**
 * User brief - initial project description
 */
export interface Brief {
  content: string;
  timestamp?: Date;
}

// ============================================================================
// PM Agent Output Types
// ============================================================================

/**
 * Technology stack specification
 */
export interface TechStack {
  framework: string;
  language: string;
  styling: string;
  additional?: string[];
}

/**
 * File specification in the project plan
 */
export interface FileSpec {
  path: string;
  purpose: string;
}

/**
 * Development plan generated by PM Agent
 */
export interface DevelopmentPlan {
  project_name: string;
  stack: TechStack;
  files: FileSpec[];
  features?: string[];
  architecture?: string;
}

/**
 * Product Requirements Document
 */
export interface PRD {
  title: string;
  goal: string;
  features: string[];
  technicalRequirements?: string[];
  userStories?: string[];
}

/**
 * PM Agent output
 */
export interface PMAgentResult {
  prd: string; // Markdown formatted PRD
  plan: DevelopmentPlan;
}

// ============================================================================
// Dev Agent Output Types
// ============================================================================

/**
 * Generated file content
 */
export interface GeneratedFile {
  path: string;
  content: string;
}

/**
 * Dev Agent output
 */
export interface DevAgentResult {
  files: GeneratedFile[];
  metadata?: {
    totalFiles: number;
    linesOfCode: number;
    generatedAt: Date;
  };
}

// ============================================================================
// Integration Types
// ============================================================================

/**
 * GitHub repository creation result
 */
export interface GitHubResult {
  repoUrl: string;
  repoName: string;
  owner: string;
  defaultBranch: string;
  createdAt?: Date;
}

/**
 * Vercel deployment result
 */
export interface VercelResult {
  deployUrl: string;
  previewUrl: string;
  projectId: string;
  deploymentId: string;
  deployTime?: number; // seconds
  status: 'ready' | 'building' | 'error' | 'queued';
}

/**
 * GitHub Actions workflow setup result
 */
export interface GitHubActionsResult {
  workflowsCreated: string[];
  secretsConfigured: string[];
}

// ============================================================================
// Orchestrator Types
// ============================================================================

/**
 * Overall project creation status
 */
export type ProjectStatus =
  | 'idle'
  | 'generating_prd'
  | 'generating_code'
  | 'creating_repo'
  | 'deploying'
  | 'configuring_ci'
  | 'completed'
  | 'error';

/**
 * Status update sent via SSE
 */
export interface StatusUpdate {
  status: ProjectStatus;
  message: string;
  progress?: number; // 0-100
  timestamp: Date;
  error?: string;
}

/**
 * Final project creation result
 */
export interface ProjectResult {
  prd: string;
  plan: DevelopmentPlan;
  repoUrl: string;
  deployUrl?: string;
  previewUrl?: string;
  deployTime?: number;
  workflowsCreated?: string[];
  totalDuration: number; // seconds
  createdAt: Date;
}

// ============================================================================
// Error Types
// ============================================================================

/**
 * Custom error for agent failures
 */
export class AgentError extends Error {
  constructor(
    message: string,
    public readonly agent: 'PM' | 'Dev' | 'GitHub' | 'Vercel',
    public readonly originalError?: unknown
  ) {
    super(message);
    this.name = 'AgentError';
  }
}

/**
 * Custom error for validation failures
 */
export class ValidationError extends Error {
  constructor(
    message: string,
    public readonly field: string,
    public readonly value?: unknown
  ) {
    super(message);
    this.name = 'ValidationError';
  }
}

// ============================================================================
// Configuration Types
// ============================================================================

/**
 * Environment configuration
 */
export interface EnvironmentConfig {
  anthropicApiKey: string;
  githubToken: string;
  vercelToken?: string;
  vercelOrgId?: string;
  vercelProjectId?: string;
}

/**
 * Agent configuration
 */
export interface AgentConfig {
  model: string;
  maxTokens: number;
  temperature?: number;
  timeout?: number; // milliseconds
}

/**
 * PM Agent specific configuration
 */
export interface PMAgentConfig extends AgentConfig {
  minFiles?: number;
  maxFiles?: number;
}

/**
 * Dev Agent specific configuration
 */
export interface DevAgentConfig extends AgentConfig {
  requiredFiles?: string[];
  validateImports?: boolean;
}

// ============================================================================
// MCP Types
// ============================================================================

/**
 * MCP Server configuration
 */
export interface MCPServerConfig {
  command: string;
  args: string[];
  env?: Record<string, string>;
}

/**
 * MCP Client configuration
 */
export interface MCPClientConfig {
  servers: {
    github?: MCPServerConfig;
    filesystem?: MCPServerConfig;
  };
}

// ============================================================================
// API Types
// ============================================================================

/**
 * API request body for project creation
 */
export interface CreateProjectRequest {
  brief: string;
}

/**
 * SSE message format
 */
export interface SSEMessage {
  message: string;
  status?: ProjectStatus;
  progress?: number;
  result?: Partial<ProjectResult>;
  error?: string;
}

// ============================================================================
// Utility Types
// ============================================================================

/**
 * Async generator for streaming updates
 */
export type StatusStream = AsyncGenerator<StatusUpdate, ProjectResult, unknown>;

/**
 * Promise with timeout
 */
export type TimeoutPromise<T> = Promise<T> & { timeout: number };
